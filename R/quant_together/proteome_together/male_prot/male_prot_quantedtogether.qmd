---
title: "male_prot"
format: html
---



# Load dependencies
```{r setup}
#| message: false
#| warning: false

source(here::here("R/library.R"))
load(here::here("data/metadata.rda"))
load(here::here("data/df_prot.rda"))
```

# Subgroup male 
```{r}
# 1) Subset metadata for males
metadata_M <- metadata %>%
  dplyr::filter(sex == "M")

# 2) Subset proteomics matrix to those samples
prot_male <- df_prot[, metadata_M$sample_id, drop = FALSE]  # keep as matrix/df even if 1 col

print(metadata_M$sample_id)
print(colnames(prot_male))

all(colnames(prot_male) == metadata_M$sample_id)  # should be TRUE
dim(prot_male)

# 3) New sample_id
metadata_M <- metadata_M %>%
  dplyr::mutate(new_sample_id = paste0("S", seq_len(n())))

# 4) Rename columns in prot_male using the new IDs
colnames(prot_male) <- metadata_M$new_sample_id
head(colnames(prot_male))

# 5) Make group variable
metadata_M <- metadata_M %>%
  dplyr::mutate(group = paste(diet, strain, sep = "_"))

# 6) Quick checks
table(metadata_M$diet)
table(metadata_M$strain)
table(metadata_M$group)

# 7) Save
usethis::use_data(prot_male, overwrite = TRUE)
usethis::use_data(metadata_M, overwrite = TRUE)

```

# Missing values
```{r}
dim(prot_male) # 8115-116
sum(is.na(prot_male))

# 1) Binary NA matrix (0 = present, 1 = missing)
missing_matrix <- as.matrix(is.na(prot_male)) * 1

annotation_col <- metadata_M %>%
  dplyr::select(new_sample_id, diet, strain, weeks) %>%
  tibble::column_to_rownames(var = "new_sample_id")

# alignment check
stopifnot(all(colnames(missing_matrix) == rownames(annotation_col)))

# --- Heatmap ---
na_heatmap_male <- pheatmap(
  missing_matrix,
  annotation_col = annotation_col,
  cluster_rows = FALSE,
  cluster_cols = TRUE,
  show_rownames = FALSE,
  show_colnames = FALSE,
  color = c("gray95", "black"),
  legend_breaks = c(0, 1),
  legend_labels = c("Present", "Missing"),
  main = "Pattern of Missing Values Across Samples (Male)"
)

ggsave(file.path("doc", "na_heatmap_male.png"),
       plot = na_heatmap_male, width = 7, height = 6, dpi = 300, bg = "white")

##################################### valid values

valid_value_counts <- colSums(!is.na(prot_male))
count_data <- data.frame(column = names(valid_value_counts), count = valid_value_counts)

mean_value <- mean(count_data$count)
n_samples  <- length(valid_value_counts)  # expect 116

vv1_male <- ggplot(count_data, aes(x = seq_along(column), y = count)) +
  geom_bar(stat = "identity", fill = "lightblue4") +
  geom_hline(yintercept = mean_value, color = "red", linetype = "dashed", size = 1) +
  geom_text(
    aes(x = length(column) * 0.8,
        y = mean_value,
        label = paste0("Mean = ", round(mean_value, 0))),
    vjust = -0.5, color = "red", size = 4
  ) +
  labs(
    title = "Male (n=116)",
    x     = paste0("Samples (S1–S", n_samples, ")"),
    y     = "Valid Values"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title         = element_text(face = "bold", hjust = 0.5, size = 16),
    axis.text.x        = element_blank(),
    axis.ticks.x       = element_blank(),
    panel.grid.major.x = element_blank()
  )

print(vv1_male)
ggsave(file.path("doc", "vv1_male.png"),
       plot = vv1_male, width = 6, height = 3, dpi = 300, bg = "white")

```


# PCA
```{r}
n_original <- nrow(prot_male) # 8115
df_nona <- na.omit(prot_male) # 6344 (expected)
n_nona <- nrow(df_nona)

# PCA on transposed matrix
pca_nona <- prcomp(t(df_nona), scale = TRUE)

# quick looks
factoextra::fviz_pca_ind(pca_nona)
plot(pca_nona$x[,1], pca_nona$x[,2])

# Eigenvalues / variance explained
pca_var <- pca_nona$sdev^2
pca_var_perc <- round(pca_var/sum(pca_var)*100, digits = 1)
fviz_eig(pca_nona, addlabels = TRUE)

# Keep sample IDs
pca_results <- as.data.frame(pca_nona$x) %>%
  tibble::rownames_to_column("new_sample_id")

pca_data <- pca_results %>%
  dplyr::select(new_sample_id, PC1, PC2, PC3, PC4) %>%
  dplyr::inner_join(metadata_M, by = "new_sample_id") %>%
  dplyr::mutate(
    hover_text = paste0(
      "Sample: ", sample_id,
      "<br>New_Sample: ", new_sample_id,
      "<br>Diet: ", diet,
      "<br>Strain: ", strain
    )
  )

# Should be TRUE
all(pca_results$new_sample_id %in% metadata_M$new_sample_id)

pca_outlier <- plot_pca(
  data = pca_data,
  color_var = "prep_day_batch",
  shape_var = "diet",
  palette_name = "Set1",
  plot_title = "Phospho, M, (n=116)",
  ellipse = FALSE
)

plotly::ggplotly(pca_outlier)

ggsave(file.path("doc", "pca_outlier_male.png"),
       plot = pca_outlier, width = 7, height = 5, dpi = 300, bg = "white")

```




# Filtering
```{r}
# Male version
prot_male_filt100 <- PhosR::selectOverallPercent(prot_male, 1.0) # 6169
prot_male_filt70  <- PhosR::selectOverallPercent(prot_male, 0.7) # 7358
prot_male_filt50  <- PhosR::selectOverallPercent(prot_male, 0.5) # 7613

# Quick sanity check: how many proteins retained at each threshold?
c(
  pct100 = nrow(prot_male_filt100),
  pct70  = nrow(prot_male_filt70),
  pct50  = nrow(prot_male_filt50)
)

# Choose 70% as in your female workflow and save
prot_male_filt <- prot_male_filt70
usethis::use_data(prot_male_filt, overwrite = TRUE)
```

```{r}
dim(prot_male_filt) # 7422-116
sum(is.na(prot_male_filt)) # 10159

# 1. Prepare the binary NA matrix (0 = present, 1 = missing)
missing_matrix <- as.matrix(is.na(prot_male_filt)) * 1

annotation_col <- metadata_M_filtered %>%
  dplyr::select(new_sample_id, diet, strain, weeks) %>%
  tibble::column_to_rownames(var = "new_sample_id")

# alignment check
stopifnot(all(colnames(missing_matrix) == rownames(annotation_col))) # will error if not aligned

# --- Step 4: Generate the Final Heatmap ---
na_heatmap_male_filt <- pheatmap(
  missing_matrix,                    # The 0/1 data matrix
  annotation_col = annotation_col,   # The annotation data frame with correct rownames
  cluster_rows = FALSE,              # Don't cluster thousands of genes, it's slow and uninformative
  cluster_cols = TRUE,               # Cluster samples to see which are similar in missingness
  show_rownames = FALSE,             # Don't show the gene names, there are too many
  show_colnames = FALSE,             # Hide sample IDs
  color = c("gray95", "black"),      # Use two distinct colors for Present (0) and Missing (1)
  legend_breaks = c(0, 1),           # Specify breaks for the legend
  legend_labels = c("Present", "Missing"), # Label the legend clearly
  main = "Male, filtered"            # Add a title
)

ggsave(file.path("doc", "na_heatmap_male_filt.png"), plot = na_heatmap_male_filt, width = 7, height = 6, dpi = 300, bg = "white")


valid_value_counts <- colSums(!is.na(prot_male_filt))
count_data <- data.frame(column = names(valid_value_counts), count = valid_value_counts)

mean_value <- mean(count_data$count)
n_samples  <- length(valid_value_counts)

vv2_male <- ggplot(count_data, aes(x = seq_along(column), y = count)) +
  geom_bar(stat = "identity", fill = "lightblue4") +
  geom_hline(yintercept = mean_value, color = "red", linetype = "dashed", size = 1) +
  geom_text(
    aes(
      x = length(column) * 0.8,
      y = mean_value,
      label = paste0("Mean = ", round(mean_value, 0))
    ),
    vjust = -0.5, color = "red", size = 4
  ) +
  labs(
    title = paste0("Male filtered 70% (n=", n_samples, ")"),
    x     = paste0("Samples (S1–S", n_samples, ")"),
    y     = "Valid Values"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title         = element_text(face = "bold", hjust = 0.5, size = 16),
    axis.text.x        = element_blank(),
    axis.ticks.x       = element_blank(),
    panel.grid.major.x = element_blank()
  )

ggsave(file.path("doc", "vv2_male.png"), plot = vv2_male, width = 6, height = 4, dpi = 300, bg = "white")

```




