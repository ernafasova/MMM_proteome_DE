---
title: "female_phos_quantseperately"
format: html
---

# Load dependencies
```{r setup}
#| message: false
#| warning: false

source(here::here("R/library.R"))
source(here::here("R/functions.R"))
source(here::here("R/metadata.R"))
```


# Load raw data and metadata
```{r}
raw_phos_F <- readr::read_tsv(here::here("data-raw/mmm_female_phos_collapsed_10082025.txt"))
raw_phos_F <- raw_phos_F[-1, ]
rownames(raw_phos_F) <- NULL
usethis::use_data(raw_phos_F, overwrite = T)

print(colnames(raw_phos_F))
any(duplicated(raw_phos_F$PG.Genes)) # TRUE
any(duplicated(raw_phos_F$PTM_collapse_key)) # FALSE
any(raw_phos_F$PTM_collapse_key == "") # check for empty rows


# load metadata and filter for F
metadata_F_shortterm <- metadata %>% 
    filter(sex == "F", weeks == "12")

metadata_F_longterm <- metadata %>%
  filter(
    sex == "F",
    weeks %in% c(24, 36, 48),
    diet == "FFMD"
  )


table(metadata_F_shortterm$Group) # F_FFMD_J_12= 11, F_FFMD_Ntac_12 =12, F_LFD_J_12 = 6, F_LFD_Ntac_12 =6
table(metadata_F_longterm$Group)
```


# Modify raw data
```{r}
colnames(raw_phos_F)

phos_F <- raw_phos_F %>%
  dplyr::select(PTM_collapse_key, contains("2025")) %>%
  column_to_rownames(var = "PTM_collapse_key") %>%
  dplyr::mutate(across(everything(), as.numeric)) %>%
  dplyr::mutate(across(everything(), ~ replace(., is.nan(.), NA))) %>%
  dplyr::mutate(across(everything(), log2))


colnames(phos_F)
colnames(phos_F) <- paste0("S", 1:113)

class(phos_F)
usethis::use_data(phos_F, overwrite = T)

setequal(colnames(phos_F), metadata_F$new_sample_id) # regardless of order
all(colnames(phos_F) == metadata_F$new_sample_id)  # checks the order
```


# STY
```{r}
# 1) Prepare data for the S/T/Y distribution
aa_counts <- raw_phos_F %>%
  dplyr::filter(PTM_0_aa %in% c("S", "T", "Y")) %>%
  dplyr::count(PTM_0_aa, name = "Count") %>%
  dplyr::rename(Category = PTM_0_aa) %>%
  dplyr::arrange(desc(Category)) %>%   # Arrange for consistent plotting
  dplyr::mutate(
    Percentage = Count / sum(Count) * 100,
    Label      = paste0(
      Category, "\n", format(Count, big.mark = ","),
      "\n(", round(Percentage, 1), "%)"
    )
  )

# 2) Calculate totals for subtitle
protein_count <- n_distinct(raw_phos_F$PG.Genes)
total_sites   <- sum(aa_counts$Count)

# 3) Create the Pie Chart
pie_plot_STY <- ggplot(aa_counts, aes(x = "", y = Percentage, fill = Category)) +
  geom_bar(stat = "identity", width = 1, color = "white", alpha = 0.7) +          # pie slices
  coord_polar("y", start = 0) +                                      # turn bar into pie
  geom_text(                                                         # add labels
    aes(label = Label),
    position = position_stack(vjust = 0.5),
    color    = "black",
    fontface = "bold",
    size     = 4
  ) +
  scale_fill_brewer(palette = "Dark2") +
  theme_void() +
  labs(
    title    = "S/T/Y Female",
    subtitle = paste(
      "Total Sites:", format(total_sites, big.mark = ","),
      "| Total Phosphoproteins:", format(protein_count, big.mark = ",")
    )
  ) +
  theme(
    plot.title    = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    legend.position = "none"   # legend not needed, labels are inside
  )

print(pie_plot_STY)
ggsave(file.path("doc", "pie_plot_STY.png"), plot = pie_plot_STY, width = 5, height = 5, dpi = 300, bg = "white")
```


# Number of phosphosites
```{r}
sites_per_protein <- raw_phos_F %>% 
    dplyr::filter(!is.na(PG.Genes)) %>% 
    dplyr::group_by(PG.Genes) %>% 
    dplyr::summarise(SiteCount = n_distinct(PTM_collapse_key), .groups = "drop")

site_freq <- sites_per_protein %>% 
    dplyr::count(SiteCount)

sites_protein_plot <- ggplot(site_freq, aes(x = SiteCount, y = n)) +
    geom_col(fill = "steelblue", color = "white") +
    geom_text(aes(label = ifelse(n <3, n, "")), vjust = -0.5, size = 3) +
    labs(
        title = "Phosphosites per protein",
        x = "Number of phosphosites", 
        y = "Number of proteins"
    ) +
    theme_minimal()

print(sites_protein_plot)

ggsave(file.path("doc", "sites_protein_plot.png"), plot = sites_protein_plot, width = 7, height = 3, dpi = 300, bg = "white")
```


# sites per protein
```{r}
protein_site_counts <- raw_phos_F %>% 
    dplyr::filter(!is.na(PG.Genes)) %>% 
    dplyr::group_by(PG.Genes) %>% 
    dplyr::summarise(SiteCount = n_distinct(PTM_collapse_key)) %>% 
    dplyr::arrange(desc(SiteCount))

cat("Top 10 most phosphorylated proteins:\n")
print(head(protein_site_counts, 10))


top_10_proteins <- head(protein_site_counts, 10)

plot_top_10 <- ggplot(top_10_proteins, 
                      aes(x = reorder(PG.Genes, SiteCount), y = SiteCount)) +
  geom_col(fill = "#ef8a62", color = "black") +
  geom_text(aes(label = SiteCount), hjust = -0.2, size = 3) +
  coord_flip() +  # flip to make it horizontal
  labs(
    title = "Top 10 phosphorylated proteins",
    x = "Proteins",
    y = "Number of Unique Phosphosites"
  ) +
  theme_minimal(base_size = 14) +
  theme(plot.title   = element_text(face = "bold", hjust = 0.5, size = 15),
        axis.text.x  = element_text(size = 12, color = "black"),
        axis.text.y  = element_text(size = 12, color = "black"),
        axis.title.x = element_text(size = 14, color = "black"),
        axis.title.y = element_text(size = 14, color = "black"),
        panel.grid.major.x = element_blank())

print(plot_top_10)
ggsave(file.path("doc", "plot_top_10.png"), plot = plot_top_10, width = 7, height = 4, dpi = 300, bg = "white")
```


# Overlap with global proteome
```{r}
# Your setup (assuming 'proteins' and 'phosphoproteins' are already created)
proteins <- rownames(prot_female)
phosphoproteins <- unique(raw_phos_F$PG.Genes) # 1. Find the proteins common to both datasets
common_proteins <- intersect(proteins, phosphoproteins) # 2. Find proteins unique to the global proteome (identified but not found to be phosphorylated)
unique_to_proteome <- setdiff(proteins, phosphoproteins) # 3. Find proteins unique to the phosphoproteome (identified only in the phospho-enriched fraction)
unique_to_phosphoproteome <- setdiff(phosphoproteins, proteins) # 4. Print the counts to verify

cat("Total Proteins in Global Proteome:", length(proteins), "\n")
cat("Total Proteins in Phosphoproteome:", length(phosphoproteins), "\n")
cat("--------------------------------------------------\n")
cat("Number of Common Proteins:", length(common_proteins), "\n")
cat("Number of Proteins Unique to Global Proteome:", length(unique_to_proteome), "\n")
cat("Number of Proteins Unique to Phosphoproteome:", length(unique_to_phosphoproteome), "\n")


######################### euler ################################################
protein_sets <- list(
  Global_Proteome = proteins,
  Phosphoproteome = phosphoproteins
)

# Calculate the Euler diagram fit
fit <- euler(protein_sets)

# Plot the diagram with enhanced styling
# This creates a plot object that you can save
euler_plot <- plot(
  fit,
  fills = list(fill = c("#91bfdb", "#f1a340"), alpha = 0.7), # Custom colors with transparency
  labels = list(col = "black", fontface = "bold", cex = 1.2), # Labels for set names
  quantities = list(col = "black", fontface = "bold", cex = 1.2), # Numbers inside the circles
  main = "Overlap of Identified Proteins" # Main title for the plot
)

print(euler_plot)

ggsave(here::here("doc", "euler_plot.png"), plot = euler_plot, width = 7, height = 5, dpi = 300, bg = "white")
```

# Dynamic range
```{r}
df_protF_nonlog2_values <- 2^prot_female

# 1) Sets of proteins
proteins        <- rownames(prot_female)
phosphoproteins <- unique(raw_phos_F$PG.Genes)
common_proteins <- intersect(proteins, phosphoproteins)

# 2) Abundance table (linear values → rank → cumulative %)
abund_df <- df_protF_nonlog2_values %>%
  mutate(median = matrixStats::rowMedians(as.matrix(.), na.rm = TRUE)) %>%
  arrange(desc(median)) %>%
  mutate(
    rank    = row_number(),
    protein = rownames(.),
    prop    = median / sum(median, na.rm = TRUE),
    cumperc = cumsum(prop) * 100,
    phospho_status = ifelse(protein %in% common_proteins, "Phosphorylated", "Not Phosphorylated")
  )

# 3) Quartiles by cumulative % (factor on Y)
abund_df <- abund_df %>%
  mutate(
    quartile = cut(
      cumperc,
      breaks = c(0, 25, 50, 75, 100),
      labels = c("Q1", "Q2", "Q3", "Q4"),
      include.lowest = TRUE
    )
  )

totals_by_quartile <- abund_df %>% dplyr::count(quartile, name = "total")

phospho_by_quartile <- abund_df %>%
  dplyr::filter(phospho_status == "Phosphorylated") %>%
  dplyr::count(quartile, name = "phos")


counts_df <- full_join(totals_by_quartile, phospho_by_quartile, by = "quartile") %>%
  mutate(
    total = replace_na(total, 0L),
    phos  = replace_na(phos,  0L)
  )

# 5) Build label dataframe (one label per quartile)
y_mid <- c(Q1 = 12.5, Q2 = 37.5, Q3 = 62.5, Q4 = 87.5)

label_df <- counts_df %>%
  mutate(
    q_chr = as.character(quartile),
    y     = y_mid[q_chr],
    label = paste0(q_chr, "\nTotal: ", total, "\nPhos: ", phos)
  )

# 6) Plot
n <- nrow(abund_df)

cumulative_phospho <- ggplot(abund_df, aes(rank, cumperc)) +
  # Quartile bands
  annotate("rect", xmin = 1, xmax = n, ymin = 0,  ymax = 25,  fill = "blue", alpha = 0.1) +
  annotate("rect", xmin = 1, xmax = n, ymin = 25, ymax = 50,  fill = "red",  alpha = 0.1) +
  annotate("rect", xmin = 1, xmax = n, ymin = 50, ymax = 75,  fill = "blue", alpha = 0.1) +
  annotate("rect", xmin = 1, xmax = n, ymin = 75, ymax = 100, fill = "red",  alpha = 0.1) +
  # Curve + points
  geom_line(size = 1, colour = "#1f4e79") +
  geom_point(aes(color = phospho_status), size = 2, alpha = 0.6) +
  scale_color_manual(values = c("Phosphorylated" = "#E69F00", "Not Phosphorylated" = "grey50")) +
  # Quartile labels (no overlap)
  geom_text(
    data = label_df,
    aes(x = n * 0.985, y = y, label = label),
    inherit.aes = FALSE, hjust = 1, vjust = 0.5, size = 4
  ) +
  # Axes, limits, titles
  scale_y_continuous(limits = c(0, 100), expand = c(0, 0), name = "Cumulative abundance [%]") +
  scale_x_continuous(expand = c(0, 0), name = "Abundance rank") +
  coord_cartesian(xlim = c(0, min(n, 9000)), clip = "off") +
  labs(
    title    = "Protein Abundance Distribution"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid      = element_blank(),
    plot.margin     = margin(10, 60, 10, 10),   # extra right margin for labels
    legend.position = "bottom",
    plot.title      = element_text(hjust = 0.5, face = "bold"),
    plot.subtitle   = element_text(hjust = 0.5)
  )

print(cumulative_phospho)

# 7) Save PNG
ggsave(file.path("doc", "cumulative_phospho_highlight.png"),plot   = cumulative_phospho,width  = 5, height = 6, dpi = 300, bg = "white")
```



# valid values
```{r}
valid_counts <- colSums(!is.na(phos_F))
count_data <- data.frame(column = names(valid_counts), count = valid_counts)
count_data <- count_data %>%
  mutate(low_coverage = count < mean_value)

mean_value <- mean(count_data$count)
y_max <- max(count_data$count)
y_buffer <- max(20, 0.05 * y_max)
y_limit <- y_max + y_buffer

valid_values_phos <- ggplot(count_data, aes(x = column, y = count)) +
  geom_bar(aes(fill = low_coverage), stat = "identity") +
scale_fill_manual(values = c("TRUE" = "lightgreen", "FALSE" = "lightblue")) +
  geom_hline(yintercept = mean_value, color = "red", linetype = "dashed", size = 1, alpha = 0.3) +
  annotate("text", x = length(count_data$column) / 2 + 0.5, 
           y = mean_value + y_buffer / 2,
           label = paste0("Mean = ", round(mean_value, 0)),
           color = "red", size = 7, fontface = "bold") +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1)), limits = c(0, y_limit)) +
  labs(
    title = "Number of Phosphosites (female)",
    x = "Samples (S1-S113)",
    y = "Valid Values") +
  theme_minimal(base_size = 14) +
  theme(plot.title   = element_text(face = "bold", hjust = 0.5, size = 15),
        axis.text.x  = element_blank(),
        axis.text.y  = element_text(size = 12, color = "black"),
        axis.title.x = element_text(size = 14, face = "bold", color = "black"),
        axis.title.y = element_text(size = 14, face = "bold", color = "black"),
        panel.grid.major.x = element_blank())


print(valid_values_phos)

ggsave(file.path("doc", "valid_values_phos_female.png"), plot = valid_values_phos, width = 10, height = 4, dpi = 300, bg = "white")
```

# Filter
```{r}
phos_F_filt_complete <- PhosR::selectOverallPercent(phos_F, 1) # 6710
phos__F_filt70 <- PhosR::selectOverallPercent(phos_F, 0.7) # 8810
phos_F_filt50 <- PhosR::selectOverallPercent(phos_F, 0.5) # 13399
```


