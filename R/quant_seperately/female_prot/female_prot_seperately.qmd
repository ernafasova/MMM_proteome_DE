---
title: "female_prot"
format: html
---


# load dependencies
```{r}
source(here::here("R/library.R"))
source(here::here("R/functions.R"))
```


# load raw data 
```{r}
raw_prot_M <- readr::read_tsv(here::here("data-raw/20250908_145554_MMM_prot_male_Report.tsv"))
raw_prot_F <- readr::read_tsv(here::here("data-raw/20250908_143350_MMM_prot_female_Report.tsv"))

metadata_M <- metadata %>% filter(sex == "M")
metadata_M_shortterm <- metadata %>% filter(sex == "M", weeks == "12")
metadata_M_longterm <- metadata %>% filter(sex == "M", diet == "FFMD", weeks %in% c(24, 36, 48))

metadata_F <- metadata %>% filter(sex == "F")
metadata_F_shortterm <- metadata %>% filter(sex == "F", weeks == "12")
metadata_F_longterm <- metadata %>% filter(sex == "F", diet == "FFMD", weeks %in% c(24, 36, 48))

usethis::use_data(raw_prot_M, overwrite = T)
usethis::use_data(raw_prot_F, overwrite = T)
usethis::use_data(metadata_M, metadata_M_shortterm, metadata_M_longterm, metadata_F, metadata_F_shortterm, metadata_F_longterm, overwrite = T)
```


# modify raw data
```{r}
duplicate_genes <- raw_prot %>% 
    dplyr::count(PG.Genes) %>% 
    filter(n > 1)

raw_prot_duplicates <- raw_prot %>%
  dplyr::filter(
      PG.Genes %in% duplicate_genes$PG.Genes,
      !is.na(PG.Genes)) # remove NA

dim(raw_prot_duplicates)

raw_prot_duplicates <- raw_prot_duplicates %>%
  dplyr::mutate(missing_count = rowSums(is.na(.)))

raw_prot_duplicates$genes <- raw_prot_duplicates$PG.Genes
raw_prot_duplicates$proteins <- raw_prot_duplicates$PG.ProteinGroups



# fix duplicated genes
raw_prot_fixed <- raw_prot %>%
  mutate(
    # The condition checks for all three problems at once
    PG.Genes = if_else(
      is.na(PG.Genes) | PG.Genes == "" | duplicated(PG.Genes) | duplicated(PG.Genes, fromLast = TRUE),
      
      # If TRUE (the gene name is problematic), use the value from Protein_ID
      true = PG.ProteinGroups,
      
      # If FALSE (the gene name is fine), keep the original Gene name
      false = PG.Genes
    )
  )

any(duplicated(raw_prot_fixed$PG.Genes)) # False
any(is.na(raw_prot_fixed$PG.Genes)) # check for NA
any(is.nan(raw_prot_fixed$PG.Genes)) # check for NaN
any(raw_prot_fixed$PG.Genes == "") # check for empty rows


prot_M <- raw_prot_M %>% 
    dplyr::select(PG.Genes, contains("2024")) %>% 
    column_to_rownames(var = "PG.Genes") %>% 
    dplyr::mutate(across(everything(), as.numeric)) %>% 
    dplyr::mutate(across(everything(), ~ replace(., is.nan(,), NA))) %>% 
    dplyr::mutate(across(everything(), log2))
    
    

```



# 
