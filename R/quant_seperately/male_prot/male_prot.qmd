---
title: "male_prot"
format: html
---


# load dependencies
```{r}
source(here::here("R/library.R"))
source(here::here("R/functions.R"))
```


# load raw data 
```{r}
raw_prot_M <- readr::read_tsv(here::here("data-raw/20250908_145554_MMM_prot_male_Report.tsv"))
raw_prot_F <- readr::read_tsv(here::here("data-raw/20250908_143350_MMM_prot_female_Report.tsv"))

metadata_M <- metadata %>% filter(sex == "M")
metadata_M_shortterm <- metadata %>% filter(sex == "M", weeks == "12")
metadata_M_longterm <- metadata %>% filter(sex == "M", diet == "FFMD", weeks %in% c(24, 36, 48))

metadata_F <- metadata %>% filter(sex == "F")
metadata_F_shortterm <- metadata %>% filter(sex == "F", weeks == "12")
metadata_F_longterm <- metadata %>% filter(sex == "F", diet == "FFMD", weeks %in% c(24, 36, 48))

usethis::use_data(raw_prot_M, overwrite = T)
usethis::use_data(raw_prot_F, overwrite = T)
usethis::use_data(metadata_M, metadata_M_shortterm, metadata_M_longterm, metadata_F, metadata_F_shortterm, metadata_F_longterm, overwrite = T)
```

## Modify raw data
```{r}
duplicate_genes <- raw_prot_M %>% 
    dplyr::count(PG.Genes) %>% 
    filter(n > 1)

raw_prot_duplicates <- raw_prot_M %>%
  dplyr::filter(
      PG.Genes %in% duplicate_genes$PG.Genes,
      !is.na(PG.Genes)) # remove NA


# fix duplicated genes
raw_prot_fixed_M <- raw_prot_M %>%
  mutate(
    # The condition checks for all three problems at once
    PG.Genes = if_else(
      is.na(PG.Genes) | PG.Genes == "" | duplicated(PG.Genes) | duplicated(PG.Genes, fromLast = TRUE),
      
      # If TRUE (the gene name is problematic), use the value from Protein_ID
      true = PG.ProteinGroups,
      
      # If FALSE (the gene name is fine), keep the original Gene name
      false = PG.Genes
    )
  )

any(duplicated(raw_prot_fixed_M$PG.Genes)) # False
any(is.na(raw_prot_fixed_M$PG.Genes)) # check for NA
any(is.nan(raw_prot_fixed_M$PG.Genes)) # check for NaN
any(raw_prot_fixed_M$PG.Genes == "") # check for empty rows


# create quantitative df
prot_M <- raw_prot_fixed_M %>% 
    dplyr::select(PG.Genes, contains("2024")) %>% 
    column_to_rownames(var = "PG.Genes") %>% 
    dplyr::mutate(across(everything(), as.numeric)) %>% 
    dplyr::mutate(across(everything(), ~ replace(., is.nan(.), NA))) %>%
    dplyr::mutate(across(everything(), log2))

colnames(prot_M)


prot_M <- prot_M %>%
  rename_with(~ sub(".*_(S[0-9]+)_.*", "\\1", .)) %>% 
  rename_with(~ gsub("^S", "s", .))

setequal(colnames(prot_M), metadata_M$sample_id) # regardless of order 
all(colnames(prot_M) == metadata_M$sample_id)  # checks the order
```
## Align with metadata
```{r}
print(metadata_M$sample_id)
print(colnames(prot_M))


setdiff(metadata_M$sample_id, colnames(prot_M))  # should be character(0)
prot_M <- prot_M %>% dplyr::select(dplyr::all_of(metadata_M$sample_id))

all(colnames(prot_M) == metadata_M$sample_id)  # checks the order

# Compare metadata sample IDs with data column names
comparison <- data.frame(
  Metadata = metadata_M$sample_id,
  Data     = colnames(prot_M)
)
print(comparison)
```

# Valid values
```{r}
valid_value_counts <- colSums(!is.na(prot_M))
count_data <- data.frame(column = names(valid_value_counts), count = valid_value_counts)

mean_value <- mean(count_data$count)

vv1 <- ggplot(count_data, aes(x = seq_along(column), y = count)) +
  geom_bar(stat = "identity", fill = "lightblue4") +
  geom_hline(yintercept = mean_value, color = "red", linetype = "dashed", size = 1) +
  geom_text(aes(x = length(column) * 0.8, y = mean_value, label = paste0("Mean = ", round(mean_value, 0))),
            vjust = -0.5, color = "red", size = 4) +
  labs(title = "Proteins per sample, Male (n=116)",
       x = "Samples (s1-s229)",
       y = "Valid Values") +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5, size = 16),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    panel.grid.major.x = element_blank()
  )

ggsave(file.path("doc", "vv1_male.png"), plot = vv1, width = 7, height = 4, dpi = 300,bg = "white")
```

